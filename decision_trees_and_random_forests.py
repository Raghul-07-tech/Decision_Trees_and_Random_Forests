# -*- coding: utf-8 -*-
"""Decision Trees and Random Forests

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11D_4pd8zGoPyeBKufuYxYpHm1bxjZAGV
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

df = pd.read_csv('heart.csv')
print(df.head())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X = df.drop('target', axis=1)
y = df['target']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.metrics import accuracy_score
import graphviz

dtree = DecisionTreeClassifier(max_depth=3, random_state=42)
dtree.fit(X_train, y_train)


dot_data = export_graphviz(dtree, feature_names=X.columns, class_names=['No Disease', 'Disease'], filled=True)
graph = graphviz.Source(dot_data)
graph.render("decision_tree", format='png', cleanup=True)

depths = range(1, 11)
train_acc, test_acc = [], []

for d in depths:
    model = DecisionTreeClassifier(max_depth=d, random_state=42)
    model.fit(X_train, y_train)
    train_acc.append(model.score(X_train, y_train))
    test_acc.append(model.score(X_test, y_test))

import matplotlib.pyplot as plt

plt.plot(depths, train_acc, label='Train Accuracy')
plt.plot(depths, test_acc, label='Test Accuracy')
plt.xlabel('Tree Depth')
plt.ylabel('Accuracy')
plt.title('Overfitting Analysis')
plt.legend()
plt.show()

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

print("Decision Tree Accuracy:", dtree.score(X_test, y_test))
print("Random Forest Accuracy:", rf.score(X_test, y_test))

import seaborn as sns

importances = rf.feature_importances_
feature_df = pd.DataFrame({'Feature': X.columns, 'Importance': importances}).sort_values(by='Importance', ascending=False)

sns.barplot(x='Importance', y='Feature', data=feature_df)
plt.title("Feature Importances from Random Forest")
plt.show()

from sklearn.model_selection import cross_val_score

cv_scores = cross_val_score(rf, X, y, cv=5)
print("Cross-Validation Scores:", cv_scores)
print("Mean CV Score:", cv_scores.mean())